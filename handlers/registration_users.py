from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram import types, Dispatcher
from aiogram.dispatcher.filters import Text
from functions.message_func import answer_msg, reply_msg, send_msg
from keyboards.client_kb import create_button_reply
from data_base.sqlite_bd import sql_add_users
from functions.other_func import three_letters, get_date_time

import random
import re
from logs import logging

logger = logging.getLogger("app.handlers.registration_users")

__all__ = ['registration_handlers_registration_users',
           'registration']


# –ö–ª–∞—Å—Å FSM —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
class FSMRegistration(StatesGroup):
    name = State()
    phone = State()


async def ask_for_a_phone_number(message, rt=True):
    """
    –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, –ø—Ä–µ–¥–ª–∞–≥–∞—é—â—É—é –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ–π —Ç–µ–ª–µ—Ñ–æ–Ω –±–æ—Ç—É.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.
    :param rt:
    :param message:
    :return:
    """
    # TODO –°–¥–µ–ª–∞—Ç—å —á—Ç–æ–±—ã –∫–Ω–æ–ø–∫–∞ "–¥–∞, –∫–æ–Ω–µ—á–Ω–æ" –Ω–µ —Å–∫—Ä—ã–≤–∞–ª–∞—Å—å. –ù–∞–¥–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å
    kb = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True,
                                   input_field_placeholder='üîí')
    reg_button = types.KeyboardButton(text="–î–∞, –∫–æ–Ω–µ—á–Ω–æ",
                                      request_contact=True)

    # cancel_button = types.KeyboardButton(text="‚Ü™Ô∏è–û—Ç–º–µ–Ω–∞")
    kb.add(reg_button)
    text = ''
    if rt:
        random_text = ["–†–∞–¥ –∑–Ω–∞–∫–æ–º—Å—Ç–≤—É", "–û—á–µ–Ω—å —Ä–∞–¥ –∑–Ω–∞–∫–æ–º—Å—Ç–≤—É", "–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –í–∞–º–∏"]
        random_index = random.randint(0, len(random_text) - 1)
        text = f'{random_text[random_index]}, {message.text}\n'
    await send_msg(message, f'{text}–ú–æ–≥—É –ª–∏ —è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏?', rm=kb)


async def set_phone(message):
    """
    –§—É–Ω–∫—Ü–∏—è –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –≤–≤–µ–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–ª –µ–≥–æ.
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ–≥–æ.
    :param message:
    :return:
    """
    if message.text and message.text != '':
        await answer_msg(message, '<b>–í–≤–æ–¥ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω‚ö†Ô∏è\n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É <u>"–¥–∞, –∫–æ–Ω–µ—á–Ω–æ</u>"</b>')
        await ask_for_a_phone_number(message, False)
        return ''
    try:
        msg = message.contact.phone_number
        msg = msg.replace(' ', '')
        if len(msg) == 11:
            msg = '+' + msg
        # print(f'phone auto {msg}')
        return msg.strip()
    except Exception as error:
        logger.error(f'–û—à–∏–±–∫–∞ –æ—Ç—Ä–∞–±–æ—Ç–∞–Ω–∞', error)


# async def set_directorate(message):
#     if message.text and message.text[0] != '/':
#         set_bd_update('users', 'telegram_id', message.from_user.id, 'directorate', message.text.strip())
#         print(f'directorate {message.text}')
#     # delete_msg(message.chat.id, mid.message_id)
#     else:
#         await answer_msg(message, f'<b>–í—ã –≤–≤–µ–ª–∏ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ!\nüß∞ –í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ—é –¥–∏—Ä–µ–∫—Ü–∏—é</b>')


async def cancel_fsm(message: types.Message, state: FSMContext):
    """
    –§—É–Ω–∫—Ü–∏—è –æ—Ç–º–µ–Ω—ã FSM —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.
    –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–≤–µ—Ç–∏—Ç "–æ—Ç–º–µ–Ω–∞" –∏–ª–∏ –Ω–∞–∂–º–µ—Ç –Ω–∞ –∫–ª–∞–≤–∏—à—É "–æ—Ç–º–µ–Ω–∞".
    :param message:
    :param state:
    :return:
    """
    current_state = await state.get_state()
    if current_state is None:
        return
    cancel = ["–û—Ç–º–µ–Ω–∞‚ùó", "–•–æ—Ä–æ—à–æ‚ùóÔ∏è", "–û–∫‚ùó", "–°–¥–µ–ª–∞–Ω–æ‚ùó", "–ö–∞–∫ —Å–∫–∞–∂–µ—Ç–µ‚ùóÔ∏è"]
    random_index = random.randint(0, len(cancel) - 1)
    await reply_msg(message, cancel[random_index])
    await state.finish()


async def registration(message: types.Message):
    await FSMRegistration.name.set()
    kb = await create_button_reply(1, '‚Ü™Ô∏è–û—Ç–º–µ–Ω–∞')
    random_text = ["–ú–æ–≥—É –ª–∏ —è —É–∑–Ω–∞—Ç—å, –∫–∞–∫ –í–∞—Å –∑–æ–≤—É—Ç", "–ö–∞–∫ —è –º–æ–≥—É –∫ –í–∞–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è"]
    random_index = random.randint(0, len(random_text) - 1)
    await send_msg(message, f'{random_text[random_index]}?\n'
                            f'(–≤–≤–µ–¥–∏—Ç–µ –§–ò–û)', kb, spec_chat_id=message.from_user.id)


async def load_user_name(message: types.Message, state: FSMContext):
    """
    –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω—ã–µ —Ñ–∞–º–∏–ª–∏—é –∏ –∏–º—è –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º –∏ –µ—Å–ª–∏ True –ø—Ä–æ—Å–∏—Ç –≤—ã–±—Ä–∞—Ç—å –¥–∏—Ä–µ–∫—Ü–∏—é.
    :param message:
    :param state:
    :return:
    """
    temp, w = await three_letters(message.text)
    spaces_count = len(message.text.split(' '))
    if re.search(r'[^–∞-—è–ê-–Ø ]', message.text):
        await answer_msg(message, '<b>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–∏—Ä–∏–ª–ª–∏—Ü—É –±–µ–∑ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤‚ö†Ô∏è</b>')
        await registration(message)
        return
    elif len(temp) > 0:
        await answer_msg(message, f'<b>–í—ã –≤–≤–µ–ª–∏ {w} "{temp}" —Ç—Ä–∏ —Ä–∞–∑–∞ –ø–æ–¥—Ä—è–¥"‚ö†Ô∏è</b>')
        await registration(message)
        return
    elif message.text.casefold() == '—Ñ–∞–º–∏–ª–∏—è':
        await answer_msg(message, '<b>–í—ã –≤–≤–µ–ª–∏ —Å–ª–æ–≤–æ "—Ñ–∞–º–∏–ª–∏—è"üëç</b>')
        await registration(message)
        return
    elif message.text.casefold() == '–∏–º—è':
        await answer_msg(message, '<b>–í—ã –≤–≤–µ–ª–∏ —Å–ª–æ–≤–æ "–∏–º—è"üëç</b>')
        await registration(message)
        return
    elif spaces_count < 2:
        await answer_msg(message, '<b>–í—ã –≤–≤–µ–ª–∏ –æ–¥–Ω–æ —Å–ª–æ–≤–æ‚ö†Ô∏è\n'
                                  '–¥–ª—è –§–ò–û —ç—Ç–æ —Å–ª–∏—à–∫–æ–º –º–∞–ª–æ</b>')
        await registration(message)
        return
    elif spaces_count > 3:
        await answer_msg(message, f'<b>–í—ã –≤–≤–µ–ª–∏ {spaces_count} —Å–ª–æ–≤–∞\n'
                                  f'–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ "-" –≤ –¥–≤–æ–π–Ω–æ–º –∏–º–µ–Ω–∏ –∏–ª–∏ —Ñ–∞–º–∏–ª–∏–∏</b>')
        await registration(message)
        return
    elif len(message.text) > 30:
        await answer_msg(message, '<b>–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –±—É–∫–≤‚ö†Ô∏è</b>')
        await registration(message)
        return
    elif len(message.text) <= 6:
        await answer_msg(message, '<b>–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ –≤—Å—Ç—Ä–µ—á–∞–ª –Ω–∞ —Å—Ç–æ–ª—å–∫–æ –∫–æ—Ä–æ—Ç–∫–∏–µ –§–ò–û‚ö†Ô∏è</b>')
        await registration(message)
        return

    async with state.proxy() as data:
        data['telegram_id'] = message.from_user.id
        data['name'] = message.text
    await FSMRegistration.next()
    await ask_for_a_phone_number(message)


async def load_user_phone(message: types.Message, state: FSMContext):
    """
    –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç—É, –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ FSM state –í –ë–î
    –∏ –ø–∏—à–µ–º –æ–± —É—Å–ø–µ—à–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.
    :param message:
    :param state:
    :return:
    """
    phone = await set_phone(message)
    if phone == '':
        await FSMRegistration.phone.set()
        return
    async with state.proxy() as data:
        data['phone'] = phone
        user_name = data['name']
    await sql_add_users(state)
    await state.finish()
    await answer_msg(message, f'–í—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–ª–∏ –Ω–æ–º–µ—Ä: {phone}')
    logger.info(f'{await get_date_time()} –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {data["name"]} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è')
    await answer_msg(message, f'–†–∞–¥ –∑–Ω–∞–∫–æ–º—Å—Ç–≤—É {user_name}! –ß–µ–º —è –º–æ–≥—É –í–∞–º –ø–æ–º–æ—á—å?')
    # await entering_a_question(message)


def registration_handlers_registration_users(_dp: Dispatcher):
    """
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤–º–µ—Å—Ç–æ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–æ–≤ –≤—ã–∑–æ–≤–∞ —Ñ—É–Ω–∫—Ü–∏–π.
    :param _dp:
    :return:
    """
    # dp.register_message_handler(contact, content_types=['photo'], state=FSMAdmin.photo)
    _dp.register_message_handler(cancel_fsm, chat_type=types.ChatType.PRIVATE,
                                 state="*", commands=['–æ—Ç–º–µ–Ω–∞', 'cancel'])
    _dp.register_message_handler(cancel_fsm, Text(equals='–æ—Ç–º–µ–Ω–∞', ignore_case=True),
                                 chat_type=types.ChatType.PRIVATE, state="*")
    _dp.register_message_handler(load_user_name, chat_type=types.ChatType.PRIVATE,
                                 state=FSMRegistration.name)
    _dp.register_message_handler(load_user_phone, chat_type=types.ChatType.PRIVATE,
                                 content_types=types.ContentType.CONTACT, state=FSMRegistration.phone)
    _dp.register_message_handler(load_user_phone, chat_type=types.ChatType.PRIVATE,
                                 state=FSMRegistration.phone)
    # dp.register_message_handler(load_user_phone, state=FSMRegistration.phone)
