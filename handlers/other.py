import asyncio

from create_bot import bot, dialogflow, session_client, session, language_code
# import json # –†–∞–±–æ—Ç–∞ —Å json —Ñ–∞–π–ª–∞–º–∏, —Ç—É—Ç –Ω—É–∂–µ–Ω –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞ –º–∞—Ç–∞
# import string # –î–ª—è –≤—ã–¥–µ—Ä–≥–∏–≤–∞–Ω–∏—è —Å–ø–µ—Ü —Å–∏–º–≤–æ–ª–æ–º —Ç–∞–∫–∏—Ö –∫–∞–∫ '!@#$', –Ω—É–∂–Ω–æ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –º–∞—Å–∫–∏—Ä–æ–≤–∫–∏ –º–∞—Ç–∞
import random

from aiogram import types, Dispatcher

from data_base import max_rowid, find_column
from functions.message_func import send_msg, answer_msg
from aiogram.dispatcher.filters import ChatTypeFilter
from functions.other_func import get_user_name, get_date_time, data_from_database_row
from handlers import registration
from handlers.admin import check_ban
from censure.censure import censure_filter

from logs import logging
from handlers.submit_request import FSMNew_question, load_text

logger = logging.getLogger("app.handlers.other")

__all__ = ['registration_handlers_other']


async def command_test(message: types.Message):
    """–§—É–Ω–∫—Ü–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –•–µ–Ω–¥–ª–µ—Ä–æ–≤, –ø—Ä–∏ —ç—Ç–æ–º –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä—ã –Ω–µ –Ω—É–∂–Ω—ã

    :return:
    """
    try:
        if await check_ban(message.from_user.id):
            logger.warning(f'–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–∏—à–µ—Ç –±–æ—Ç—É:{message.text}')
            return
        user = await get_user_name(message)
        if message.from_user.id != 541261735 and message.from_user.id != 411787402:
            logger.info(f'{await get_date_time()} –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user} –Ω–∞–∂–∞–ª –Ω–∞ –¢–ï–°–¢')
            await message.delete()
            temp1 = await send_msg(message, '‚ö†Ô∏è–£ –í–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é‚ö†Ô∏è',
                                   spec_chat_id=message.from_user.id)
            temp = await send_msg(message, 'üôÑ', rm=None, spec_chat_id=message.from_user.id)
            await asyncio.sleep(2.5)
            temp2 = await bot.edit_message_text(chat_id=message.from_user.id,
                                                message_id=temp.message_id,
                                                text='ü§≠')
            await asyncio.sleep(2.8)
            await bot.edit_message_text(chat_id=message.from_user.id,
                                        message_id=temp.message_id,
                                        text='ü•±')
            await asyncio.sleep(3)
            await bot.delete_message(message.from_user.id, temp2.message_id)
            await asyncio.sleep(5)
            await bot.delete_message(message.from_user.id, temp1.message_id)
        else:
            pass
    except Exception as err:
        logger.error('–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞', err)


async def send_msg_moderator(message: types.Message, text: str):
    random_text = ["–û—Ç–ø—Ä–∞–≤–∏—Ç—å –í–∞—à –≤–æ–ø—Ä–æ—Å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É?", "–ú–æ–≥—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –í–∞—à –≤–æ–ø—Ä–æ—Å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É"]
    random_index = random.randint(0, len(random_text) - 1)
    await answer_msg(message, f'{random_text[random_index]}')
    question_id = int(await max_rowid()) + 1
    await FSMNew_question.text.set()
    state = Dispatcher.get_current().current_state()
    async with state.proxy() as data:
        data['question_id'] = question_id
        data['user_id'] = message.from_user.id,
    message.text = text
    await load_text(message, state)


async def send_text_private(message: types.Message):
    """–§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ —Ç–µ–ª–µ–≥—Ä–∞–º –ë–æ—Ç—É
        –û–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ –∫–æ–¥–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π.

    :param message:
    :return:
    """

    if await check_ban(message.from_user.id):
        logger.warning(f'–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–∏—à–µ—Ç –±–æ—Ç—É:{message.text}')
        return
    # –§–∏–ª—å—Ç—Ä –º–∞—Ç–æ–≤
    text = await censure_filter(message.text)
    temp = await find_column('users', 'telegram_id', message.from_user.id)
    telegram_id = await data_from_database_row(temp, 0)

    if not telegram_id:
        await registration(message)
        return

    # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç 250 —Å–∏–º–≤–æ–ª–æ–≤(–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è dialogflow), —Ç–æ–≥–¥–∞ —Ç–µ–∫—Å—Ç –Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É.
    if len(message.text) >= 250:
        await send_msg_moderator(message, text)
        return

    text_input = dialogflow.TextInput({'text': message.text, 'language_code': language_code})
    query_input = dialogflow.QueryInput({'text': text_input})  # –í–≤–æ–¥ –∑–∞–ø—Ä–æ—Å–∞

    # hello = ["–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ", "–î–æ–±—Ä—ã–π –¥–µ–Ω—å", "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é –í–∞—Å"]
    # random_index = random.randint(0, len(hello) - 1)
    # if {i.lower().translate(str.maketrans('', '', string.punctuation)) for i in message.text.split(' ')} \
    #         .intersection(set(json.load(open('censure.json')))) != set():
    #     await reply_msg(message, '–ú–∞—Ç—ã –∑–∞–ø—Ä–µ—â–µ–Ω—ã')
    #     await message.delete()
    if text.find('***') >= 0:
        logger.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {await get_user_name(message)}({message.from_user.id}) –Ω–∞–ø–∏—Å–∞–ª \n'
                    f'\"{message.text}\"\n–∞ –±–æ—Ç –∑–∞–º–µ–Ω–∏–ª –Ω–∞: {text}')
    # elif message.text.casefold() == '–ø—Ä–∏–≤–µ—Ç' or message.text.casefold() == '–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ':
    #     await answer_msg(message, f'{hello[random_index]}, {await get_user_name(message)}!')
    # elif {i.lower().translate(str.maketrans('', '', string.punctuation)) for i in message.text.split(' ')} \
    #         .intersection(set(json.load(open('hello.json')))) != set():
    #     await send_msg(message, f'üëã{hello[random_index]}, <i>{await get_user_name(message)}!</i>')
    #     await entering_a_question(message)
    #     logger.info(f'–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {await get_user_name(message)}({message.from_user.id}) '
    #                 f'–µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å \"{message.text}\"')
    response = session_client.detect_intent(  # –û—Ç–≤–µ—Ç –±–æ—Ç–∞
        session=session, query_input=query_input)

    if '/arranged_an_answer"' in str(response):
        print('response', response)
    # TODO –°–¥–µ–ª–∞—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —á—Ç–æ –µ–≥–æ —É—Å—Ç—Ä–æ–∏–ª –æ—Ç–≤–µ—Ç.
    # kb = create_button_inline(2, t1='–î–∞', —Å1=f'b_ans:yes:{question_id}:{callback.message.chat.id}',
    #                           t2='–ù–µ—Ç', c2=f'b_ans:no:{question_id}:{callback.message.chat.id}')
    # await send_msg(callback.message, f'–ë—ã–ª –ª–∏ –º–æ–π –æ—Ç–≤–µ—Ç –ø–æ–ª–µ–∑–Ω—ã–º?', kb, spec_chat_id=user_id)
    # elif 'trigger_have_question' in str(response):
    #
    if response.query_result.fulfillment_text:  # –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –∏–º–µ–µ—Ç—Å—è
        await bot.send_message(message.from_user.id,
                               response.query_result.fulfillment_text)  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        # print(response)
    else:  # –í –æ–±—Ä–∞—Ç–Ω–æ–º —Å–ª—É—á–∞–µ
        filter_stars = text.replace('*', '').replace(' ', '')
        if len(filter_stars) < 2:
            await answer_msg(message, f'–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–ª –≤–æ–ø—Ä–æ—Å–∞. –¢–æ–ª—å–∫–æ {text}')
            return

        await answer_msg(message, "–Ø –ø–æ–∫–∞ –Ω–µ –∑–Ω–∞—é –æ—Ç–≤–µ—Ç –Ω–∞ –í–∞—à –≤–æ–ø—Ä–æ—Å.")  # –Ø —Ç–µ–±—è –Ω–µ –ø–æ–Ω–∏–º–∞—é
        # kb = create_button_inline(2, t1='–¥–∞', c1=f'question_send:yes:{message.message_id}',
        #                           t2='–Ω–µ—Ç', c2=f'question_send:no:{message.message_id}',)
        await send_msg_moderator(message, text)


# async def send_text_goup(message: types.Message):
#     pass
#     # print(message.chat.id, message.from_user.id)


def registration_handlers_other(_dp: Dispatcher):
    """–§—É–Ω–∫—Ü–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –•–µ–Ω–¥–ª–µ—Ä–æ–≤, –ø—Ä–∏ —ç—Ç–æ–º –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä—ã –Ω–µ –Ω—É–∂–Ω—ã

    :param _dp:
    :return:
    """
    _dp.register_message_handler(send_text_private,
                                 ChatTypeFilter(chat_type=types.ChatType.PRIVATE),
                                 content_types=['text'])  # –î–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ —Å–∞–º–æ–º –∫–æ–Ω—Ü–µ. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ª–∏—á–∫—É
    # _dp.register_message_handler(send_text_goup,
    #                              content_types=['text'])  # –î–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ —Å–∞–º–æ–º –∫–æ–Ω—Ü–µ. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ª–∏—á–∫—É
