import asyncio

from create_bot import bot, dp
import json  # –†–∞–±–æ—Ç–∞ —Å json —Ñ–∞–π–ª–∞–º–∏, —Ç—É—Ç –Ω—É–∂–µ–Ω –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞ –º–∞—Ç–∞
import string  # –î–ª—è –≤—ã–¥–µ—Ä–≥–∏–≤–∞–Ω–∏—è —Å–ø–µ—Ü —Å–∏–º–≤–æ–ª–æ–º —Ç–∞–∫–∏—Ö –∫–∞–∫ '!@#$', –Ω—É–∂–Ω–æ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –º–∞—Å–∫–∏—Ä–æ–≤–∫–∏ –º–∞—Ç–∞
import random

from aiogram import types, Dispatcher
from functions.message_func import send_msg, reply_msg, answer_msg
from aiogram.dispatcher.filters import ChatTypeFilter
from functions.other_func import get_user_name, get_date_time
from handlers.admin import check_ban
from handlers.submit_request import entering_a_question
from logs import logging

logger = logging.getLogger("app.handlers.other")

__all__ = ['registration_handlers_other']


async def command_test(message: types.Message):
    """–§—É–Ω–∫—Ü–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –•–µ–Ω–¥–ª–µ—Ä–æ–≤, –ø—Ä–∏ —ç—Ç–æ–º –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä—ã –Ω–µ –Ω—É–∂–Ω—ã

    :return:
    """
    try:
        if await check_ban(message.from_user.id):
            logger.warning(f'–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–∏—à–µ—Ç –±–æ—Ç—É:{message.text}')
            return
        user = await get_user_name(message)
        if message.from_user.id != 541261735 and message.from_user.id != 411787402:
            logger.info(f'{await get_date_time()} –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user} –Ω–∞–∂–∞–ª –Ω–∞ –¢–ï–°–¢')
            await message.delete()
            temp1 = await send_msg(message, '‚ö†Ô∏è–£ –í–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é‚ö†Ô∏è',
                                   spec_chat_id=message.from_user.id)
            temp = await send_msg(message, 'üôÑ', rm=None, spec_chat_id=message.from_user.id)
            await asyncio.sleep(2.5)
            temp2 = await bot.edit_message_text(chat_id=message.from_user.id,
                                                message_id=temp.message_id,
                                                text='ü§≠')
            await asyncio.sleep(2.8)
            await bot.edit_message_text(chat_id=message.from_user.id,
                                        message_id=temp.message_id,
                                        text='ü•±')
            await asyncio.sleep(3)
            await bot.delete_message(message.from_user.id, temp2.message_id)
            await asyncio.sleep(5)
            await bot.delete_message(message.from_user.id, temp1.message_id)
        else:
            await new_question(message)
    except Exception as err:
        logger.error('–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞', err)


async def send_text_private(message: types.Message):
    """–§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ —Ç–µ–ª–µ–≥—Ä–∞–º –ë–æ—Ç—É
        –û–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ –∫–æ–¥–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π.

    :param message:
    :return:
    """
    # –§–∏–ª—å—Ç—Ä –º–∞—Ç–æ–≤

    if await check_ban(message.from_user.id):
        logger.warning(f'–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–∏—à–µ—Ç –±–æ—Ç—É:{message.text}')
        return
    hello = ["–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ", "–î–æ–±—Ä—ã–π –¥–µ–Ω—å", "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é –í–∞—Å"]
    random_index = random.randint(0, len(hello) - 1)
    if {i.lower().translate(str.maketrans('', '', string.punctuation)) for i in message.text.split(' ')} \
            .intersection(set(json.load(open('censure.json')))) != set():
        await reply_msg(message, '–ú–∞—Ç—ã –∑–∞–ø—Ä–µ—â–µ–Ω—ã')
        await message.delete()
        logger.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {await get_user_name(message)}({message.from_user.id}) –Ω–∞–ø–∏—Å–∞–ª –≤ —á–∞—Ç '
                    f'\"{message.text}\"')
    elif message.text.casefold() == '–ø—Ä–∏–≤–µ—Ç' or message.text.casefold() == '–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ':
        await answer_msg(message, f'{hello[random_index]}, {await get_user_name(message)}!')
    elif {i.lower().translate(str.maketrans('', '', string.punctuation)) for i in message.text.split(' ')} \
            .intersection(set(json.load(open('hello.json')))) != set():
        await send_msg(message, f'üëã{hello[random_index]}, <i>{await get_user_name(message)}!</i>')
        await entering_a_question(message)
        logger.info(f'–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {await get_user_name(message)}({message.from_user.id}) '
                    f'–µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å \"{message.text}\"')
    else:
        pass
        # await reply_msg(message, f'{await get_user_name(message)}, –ë–æ—Ç –ø–æ–∫–∞ –Ω–µ –∑–Ω–∞–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ –í–∞—à –≤–æ–ø—Ä–æ—Å.')
        # await entering_a_question(message)


async def send_text_goup(message: types.Message):
    pass
    # print(message.chat.id, message.from_user.id)


def registration_handlers_other(_dp: Dispatcher):
    """–§—É–Ω–∫—Ü–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –•–µ–Ω–¥–ª–µ—Ä–æ–≤, –ø—Ä–∏ —ç—Ç–æ–º –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä—ã –Ω–µ –Ω—É–∂–Ω—ã

    :param _dp:
    :return:
    """
    _dp.register_message_handler(send_text_private,
                                 ChatTypeFilter(chat_type=types.ChatType.PRIVATE),
                                 content_types=['text'])  # –î–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ —Å–∞–º–æ–º –∫–æ–Ω—Ü–µ. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ª–∏—á–∫—É
    _dp.register_message_handler(send_text_goup,
                                 content_types=['text'])  # –î–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ —Å–∞–º–æ–º –∫–æ–Ω—Ü–µ. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ª–∏—á–∫—É
